// 示例：字符串、字节数组与字符数组

// 声明并赋值一个字符串
// 其中可以有转义字符“\n”、“\t”等，与Go语言相同
s1 := "ab\tc"

// 多行字符串用反引号括起来
// 反引号也可用于单行字符串
// 注意反引号括起的字符串中，对转义字符不做转义处理
s1m := `
Hi,

	How are you?
	
yours,
Tom
`

// 字符串连接用加号
s2 := s1 + "3"

plt(s2)

pln(s1, "+", "3", "=", s2)

// 字符串支持Unicode字符，默认是UTF-8编码
s5 := "上善若水"

plo(s5)

// 字节数组与Go语言中的字节数组（[]byte）相同，是每个元素为一个字节的数组
// 可以用内置函数bytes来将字符串转换为字节数组
s6 := bytes(s5)

pln("s6:", s6)

// t将是一个Unicode字符（等同于Go语言中的rune类型）
// 因为上面几个汉字按UTF-8编码均各占3个字节
t := char(s5[6:9])

// 将输出单个字符“若”
pl("%c", t)

// 类似字节数组，chars表示Unicode字符数组
// s7将为包含4个Unicode字符的数组，各自占3个字节
s7 := chars(s5)

plt(s7)

// 字符串的切片是按ASCII字符切割的，结果还是一个字符串，对多字节的Unicode字符可能会在中间截断导致与预期的结果不符
pl("s5[1:2] = %v(%#v)", s5[1:2], s5[1:2])

// 字节数组的切片结果还是字节数组
pl("s6[1:2] = %v(%#v)", s6[1:2], s6[1:2])

// 字符数组的切片也还是字符数组
pl("s7[1:2] = %v(%#v)", s7[1:2], s7[1:2])

// 将Unicode字符数组转换为普通字符串
pl("string(s7[1:3]) = %v(%#v)", string(s7[1:3]), string(s7[1:3]))

// 将Unicode字符数组转换为字节数组，然后再将字节数组转换为普通字符串，效果与上面是一样的
pl("string(bytes(string(s7[1:3]))) = %v(%#v)", string(bytes(string(s7[1:3]))), string(bytes(string(s7[1:3]))))

// 分别输出字符串、字节数组和字符数组的第一项以查看区别
pl("%c", s5[1])
pl("%c", s6[1])
pl("%c", s7[1])

// 分别输出字符串、字节数组和字符数组的第一项（包括其类型）以查看区别
pl("%T, %#v", s5[1], s5[1])
pl("%v, %#v", typeOf(s6[1]), s6[1])
pl("%T, %#v", s7[1], s7[1])

// 使用for循环来遍历字符串
for i := 0; i < len(s5); i++ {
	pl("%v: %v, %v", i, typeOf(s5[i]), s5[i])
}

// 使用for...in循环来遍历字符串
for i, v in s5 {
	pl("%v: %v, %v", i, typeOf(v), v)
}

// 遍历字符数组
for i, v in s7 {
	// 内置函数typeName等同于typeOf
	pl("%v: %v, %v", i, typeName(v), v)
}
